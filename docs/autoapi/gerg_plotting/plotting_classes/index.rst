gerg_plotting.plotting_classes
==============================

.. py:module:: gerg_plotting.plotting_classes


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/gerg_plotting/plotting_classes/animator/index
   /autoapi/gerg_plotting/plotting_classes/coverage_plot/index
   /autoapi/gerg_plotting/plotting_classes/histogram/index
   /autoapi/gerg_plotting/plotting_classes/map_plot/index
   /autoapi/gerg_plotting/plotting_classes/plotter/index
   /autoapi/gerg_plotting/plotting_classes/plotter_3d/index
   /autoapi/gerg_plotting/plotting_classes/scatter_plot/index
   /autoapi/gerg_plotting/plotting_classes/scatter_plot_3d/index


Classes
-------

.. autoapisummary::

   gerg_plotting.plotting_classes.Animator
   gerg_plotting.plotting_classes.CoveragePlot
   gerg_plotting.plotting_classes.Histogram
   gerg_plotting.plotting_classes.MapPlot
   gerg_plotting.plotting_classes.ScatterPlot
   gerg_plotting.plotting_classes.ScatterPlot3D


Package Contents
----------------

.. py:class:: Animator

   A class for creating animations (GIFs) from a sequence of images generated by a plotting function.

   This class handles both in-memory and disk-based frame generation depending on the number
   of frames, optimizing memory usage for larger animations.

   Parameters
   ----------
   image_dpi : int, optional
       Resolution (dots per inch) for saved images, default is 300

   Attributes
   ----------
   plotting_function : Callable
       Function used to generate each frame
   param_list : list[dict]
       List of parameter dictionaries for each frame
   num_iterations : int
       Total number of frames to generate
   duration : int | float
       Duration of each frame in milliseconds
   frames : list
       List to store generated frames in memory
   gif_filename : Path
       Output path for the generated GIF
   images_path : Path
       Directory for temporary image storage
   image_files : list
       List of generated image file paths
   function_kwargs : dict
       Additional arguments for the plotting function


   .. py:method:: animate(plotting_function, param_dict, gif_filename: str, fps=24, **kwargs) -> None

      Create and save a GIF animation.

      Parameters
      ----------
      plotting_function : Callable
          Function that generates each frame
      param_dict : dict
          Dictionary of parameters for frame generation
      gif_filename : str
          Output path for the GIF
      fps : int, optional
          Frames per second, default is 24
      ``**kwargs``
          Additional arguments passed to plotting_function



   .. py:attribute:: duration
      :type:  int | float


   .. py:attribute:: frames
      :type:  list


   .. py:attribute:: function_kwargs
      :type:  dict


   .. py:attribute:: gif_filename
      :type:  pathlib.Path


   .. py:attribute:: image_dpi
      :type:  int


   .. py:attribute:: image_files
      :type:  list


   .. py:attribute:: images_path
      :type:  pathlib.Path


   .. py:attribute:: iteration_param
      :type:  str


   .. py:attribute:: num_iterations
      :type:  int


   .. py:attribute:: param_list
      :type:  list[dict]


   .. py:attribute:: plotting_function
      :type:  Callable


.. py:class:: CoveragePlot

   Bases: :py:obj:`Base`


   A class for creating and managing plots showing multiple coverage areas.

   Parameters
   ----------
   fig : Figure, optional
       Matplotlib figure object.
   ax : Axes, optional
       Matplotlib axes object.
   figsize : tuple, optional
       Size of the figure (width, height).
   horizontal_padding : float
       Padding on left and right of plot. Default is 0.25.
   vertical_padding : float
       Padding on top and bottom of plot. Default is 0.75.
   xlabels : list
       Labels for x-axis ticks.
   ylabels : list
       Labels for y-axis ticks.
   cmap : str or Colormap
       Colormap for coverage areas.
   coverage_color_default : str or tuple
       Default color for coverages if specified.

   Attributes
   ----------
   color_iterator : itertools.cycle
       Iterator for cycling through colors.
   coverages : list
       List of Coverage objects.
   grid : Grid
       Grid object for the plot.
   plotting_kwargs : dict
       Default keyword arguments for plotting.


   .. py:method:: add_coverage(xrange, yrange, label=None, **kwargs)

      Add a new coverage area to the plot.

      Parameters
      ----------
      xrange : list or scalar
          Range or single value for x-axis coverage.
      yrange : list or scalar
          Range or single value for y-axis coverage.
      label : str, optional
          Label for the coverage area.
      ``**kwargs``
          Additional keyword arguments for coverage customization.

      Raises
      ------
      ValueError
          If xrange and yrange are not the same length.



   .. py:method:: add_grid(show_grid: bool)

      Add grid to the plot if requested.

      Parameters
      ----------
      show_grid : bool
          Whether to show the grid.



   .. py:attribute:: ax
      :type:  matplotlib.axes.Axes


   .. py:attribute:: cmap
      :type:  str | matplotlib.colors.Colormap


   .. py:attribute:: color_iterator
      :type:  itertools.cycle


   .. py:method:: coverage_color()

      Get the next color for a coverage area.

      Returns
      -------
      tuple or str
          RGBA color tuple or specified default color.



   .. py:attribute:: coverage_color_default


   .. py:attribute:: coverages
      :type:  list[Coverage]


   .. py:method:: custom_ticks(labels, axis: str)

      Set custom tick labels for specified axis.

      Parameters
      ----------
      labels : list
          List of tick labels.
      axis : str
          Axis to customize ('x' or 'y').



   .. py:attribute:: fig
      :type:  matplotlib.figure.Figure


   .. py:attribute:: figsize
      :type:  tuple


   .. py:attribute:: grid
      :type:  Grid


   .. py:method:: handle_ranges(xrange, yrange)

      Convert string labels to numeric indices for plotting.

      Parameters
      ----------
      xrange : list
          Range values for x-axis.
      yrange : list
          Range values for y-axis.

      Returns
      -------
      tuple
          Processed (xrange, yrange) with numeric values.



   .. py:attribute:: horizontal_padding
      :type:  float


   .. py:method:: init_figure() -> None

      Initialize figure and axes if not provided.



   .. py:method:: plot(show_grid=True)

      Create the complete coverage plot.

      Parameters
      ----------
      show_grid : bool, optional
          Whether to show grid lines. Default is True.



   .. py:method:: plot_coverages()

      Plot all coverage areas on the figure.



   .. py:attribute:: plotting_kwargs
      :type:  dict


   .. py:method:: save(filename, **kwargs)

      Save the current figure to a file.

      Parameters
      ----------
      filename : str
          Path to save the figure.
      ``**kwargs``
          Additional keyword arguments passed to savefig.

      Raises
      ------
      ValueError
          If no figure exists to save.



   .. py:method:: set_padding()

      Set plot limits with padding.



   .. py:method:: set_up_plot(show_grid: bool = True)

      Configure the plot with all necessary components.

      Parameters
      ----------
      show_grid : bool, optional
          Whether to show grid lines. Default is True.



   .. py:method:: show(**kwargs)

      Display the plot.

      Parameters
      ----------
      ``**kwargs``
          Additional keyword arguments passed to plt.show().



   .. py:attribute:: vertical_padding
      :type:  float


   .. py:attribute:: xlabels
      :type:  list


   .. py:attribute:: ylabels
      :type:  list


.. py:class:: Histogram

   Bases: :py:obj:`gerg_plotting.plotting_classes.plotter.Plotter`


   A class for plotting histograms from instrument data using matplotlib.

   This class provides methods for creating 1D, 2D, and 3D histograms from data.
   Inherits from Plotter class for basic plotting functionality.


   .. py:method:: get_2d_range(x: str, y: str, **kwargs) -> tuple[list, dict]

      Calculate or retrieve the range for 2D histograms.

      Parameters
      ----------
      x : str
          Name of the x-axis variable
      y : str
          Name of the y-axis variable
      ``**kwargs`` : dict
          Optional keyword arguments including 'range' for custom ranges

      Returns
      -------
      tuple
          (range_list, modified_kwargs)
          - range_list : calculated or provided range values
          - modified_kwargs : kwargs with 'range' removed if present



   .. py:method:: plot(var: str, fig=None, ax=None, **kwargs) -> None

      Plot a 1D histogram of the given variable.

      Parameters
      ----------
      var : str
          Name of the variable to plot
      fig : matplotlib.figure.Figure, optional
          Figure object to use for plotting
      ax : matplotlib.axes.Axes, optional
          Axes object to use for plotting
      ``**kwargs`` : dict
          Additional keyword arguments passed to matplotlib.pyplot.hist



   .. py:method:: plot2d(x: str, y: str, fig=None, ax=None, **kwargs) -> None

      Plot a 2D histogram for the x and y variables.

      Parameters
      ----------
      x : str
          Name of the x-axis variable
      y : str
          Name of the y-axis variable
      fig : matplotlib.figure.Figure, optional
          Figure object to use for plotting
      ax : matplotlib.axes.Axes, optional
          Axes object to use for plotting
      ``**kwargs`` : dict
          Additional keyword arguments passed to matplotlib.pyplot.hist2d



   .. py:method:: plot3d(x: str, y: str, fig=None, ax=None, **kwargs) -> None

      Plot a 3D surface plot based on a 2D histogram.

      Parameters
      ----------
      x : str
          Name of the x-axis variable
      y : str
          Name of the y-axis variable
      fig : matplotlib.figure.Figure, optional
          Figure object to use for plotting
      ax : matplotlib.axes.Axes, optional
          Axes object to use for plotting
      ``**kwargs`` : dict
          Additional keyword arguments passed to numpy.histogram2d



.. py:class:: MapPlot

   Bases: :py:obj:`gerg_plotting.plotting_classes.plotter.Plotter`


   A class for plotting geographic data on maps using Cartopy and Matplotlib.

   Parameters
   ----------
   bathy : Bathy, optional
       Bathymetric data object
   grid_spacing : int, optional
       Spacing between gridlines in degrees, default is 1

   Attributes
   ----------
   sc : matplotlib.collections.PathCollection
       Scatter plot collection
   gl : cartopy.mpl.gridliner.Gridliner
       Gridliner for map coordinates
   cbar_var : matplotlib.colorbar.Colorbar
       Colorbar for plotted variable
   cbar_bathy : matplotlib.colorbar.Colorbar
       Colorbar for bathymetry


   .. py:method:: add_bathy(show_bathy, divider) -> None

      Add bathymetric contours to map.

      Parameters
      ----------
      show_bathy : bool
          Whether to display bathymetry
      divider : mpl_toolkits.axes_grid1.axes_divider.AxesDivider
          Divider for colorbar placement



   .. py:method:: add_coasts(show_coastlines) -> None

      Add coastlines to the map.

      Parameters
      ----------
      show_coastlines : bool
          Whether to display coastlines



   .. py:method:: add_grid(grid: bool, show_coords: bool = True) -> None

      Add gridlines and coordinate labels to map.

      Parameters
      ----------
      grid : bool
          Whether to show gridlines
      show_coords : bool, optional
          Whether to show coordinate labels, default True



   .. py:attribute:: bathy
      :type:  gerg_plotting.data_classes.bathy.Bathy


   .. py:attribute:: cbar_bathy
      :type:  matplotlib.colorbar.Colorbar


   .. py:attribute:: cbar_var
      :type:  matplotlib.colorbar.Colorbar


   .. py:method:: get_quiver_step(quiver_density) -> int | None

      Calculate step size for quiver plot density.

      Parameters
      ----------
      quiver_density : int or None
          Desired density of quiver arrows

      Returns
      -------
      int or None
          Step size for data slicing



   .. py:attribute:: gl
      :type:  cartopy.mpl.gridliner.Gridliner


   .. py:attribute:: grid_spacing
      :type:  int


   .. py:method:: init_bathy() -> None

      Initialize bathymetry object based on map bounds.

      Creates a new Bathy object if none exists, using current map bounds.



   .. py:method:: quiver(x: str = 'lon', y: str = 'lat', quiver_density: int = None, quiver_scale: float = None, grid: bool = True, show_bathy: bool = True, show_coastlines: bool = True, fig=None, ax=None) -> None

      Create quiver plot for vector data.

      Parameters
      ----------
      x : str, optional
          X-axis variable name, default 'lon'
      y : str, optional
          Y-axis variable name, default 'lat'
      quiver_density : int, optional
          Density of quiver arrows
      quiver_scale : float, optional
          Scaling factor for arrow length
      grid : bool, optional
          Whether to show grid, default True
      show_bathy : bool, optional
          Whether to show bathymetry, default True
      show_coastlines : bool, optional
          Whether to show coastlines, default True
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on



   .. py:attribute:: sc
      :type:  matplotlib.collections.PathCollection


   .. py:method:: scatter(var: str | None = None, show_bathy: bool = True, show_coastlines: bool = True, pointsize=3, linewidths=0, grid=True, show_coords=True, fig=None, ax=None) -> None

      Create scatter plot of points on map.

      Parameters
      ----------
      var : str or None, optional
          Variable name for color mapping
      show_bathy : bool, optional
          Whether to show bathymetry, default True
      show_coastlines : bool, optional
          Whether to show coastlines, default True
      pointsize : int, optional
          Size of scatter points, default 3
      linewidths : int, optional
          Width of point edges, default 0
      grid : bool, optional
          Whether to show grid, default True
      show_coords : bool, optional
          Whether to show coordinates, default True
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on



   .. py:method:: set_up_map(fig=None, ax=None, var=None) -> tuple[str, matplotlib.colors.Colormap, mpl_toolkits.axes_grid1.axes_divider.AxesDivider] | tuple[numpy.ndarray, matplotlib.colors.Colormap, mpl_toolkits.axes_grid1.axes_divider.AxesDivider]

      Set up the base map with figure, axes, and color settings.

      Parameters
      ----------
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      var : str, optional
          Variable name for color mapping

      Returns
      -------
      tuple
          (color, cmap, divider)
          - color : str or ndarray, Color values for plotting
          - cmap : matplotlib.colors.Colormap, Colormap for variable
          - divider : mpl_toolkits.axes_grid1.axes_divider.AxesDivider, Divider for colorbar placement



.. py:class:: ScatterPlot

   Bases: :py:obj:`gerg_plotting.plotting_classes.plotter.Plotter`


   Class for creating scatter plots from Data objects.

   Inherits from Plotter class for basic plotting functionality. Provides methods
   for various scatter plot types including T-S diagrams, hovmoller plots, and
   velocity vector plots.

   Parameters
   ----------
   markersize : int or float
       Size of scatter plot markers, default is 10


   .. py:method:: TS(color_var=None, fig=None, ax=None, contours: bool = True) -> None

      Create temperature-salinity diagram.

      Parameters
      ----------
      color_var : str or None, optional
          Variable name for color mapping
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      contours : bool, optional
          Whether to show sigma-theta contours, default True



   .. py:method:: calculate_quiver_step(num_points, quiver_density) -> int

      Calculate step size for quiver plot density.

      Parameters
      ----------
      num_points : int
          Total number of data points
      quiver_density : int
          Desired density of quiver arrows

      Returns
      -------
      int
          Step size for data sampling



   .. py:method:: cross_section(longitude, latitude) -> None
      :abstractmethod:


      Method placeholder for plotting cross-sections.

      Args:
          longitude: Longitude line for the cross-section.
          latitude: Latitude line for the cross-section.

      Raises:
          NotImplementedError: Indicates that the method is not yet implemented.



   .. py:method:: get_density_color_data(color_var: str) -> numpy.ndarray

      Get color data for density plotting.

      Parameters
      ----------
      color_var : str
          Variable name for color data

      Returns
      -------
      np.ndarray
          Array of color values



   .. py:method:: hovmoller(var: str, fig=None, ax=None, **kwargs) -> None

      Create depth vs time plot colored by variable.

      Parameters
      ----------
      var : str
          Variable name for color mapping
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      ``**kwargs``
          Additional arguments for scatter plot



   .. py:attribute:: markersize
      :type:  int | float


   .. py:method:: power_spectra_density(psd_freq=None, psd=None, var_name: str = None, sampling_freq=None, segment_length=None, theta_rad=None, highlight_freqs: list = None, fig=None, ax=None) -> None

      Create power spectral density plot.

      Parameters
      ----------
      psd_freq : array-like, optional
          Frequency values
      psd : array-like, optional
          Power spectral density values
      var_name : str, optional
          Variable name for PSD calculation
      sampling_freq : float, optional
          Sampling frequency
      segment_length : int, optional
          Length of segments for PSD calculation
      theta_rad : float, optional
          Angle in radians
      highlight_freqs : list, optional
          Frequencies to highlight
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on

      Raises
      ------
      ValueError
          If neither PSD values nor calculation parameters are provided



   .. py:method:: quiver1d(x: str, quiver_density: int = None, quiver_scale: float = None, fig=None, ax=None) -> None

      Create 1D quiver plot for velocity data.

      Parameters
      ----------
      x : str
          Variable name for x-axis
      quiver_density : int, optional
          Density of quiver arrows
      quiver_scale : float, optional
          Scaling factor for arrow length
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on



   .. py:method:: quiver2d(x: str, y: str, quiver_density: int = None, quiver_scale: float = None, fig=None, ax=None) -> None

      Create 2D quiver plot for velocity data.

      Parameters
      ----------
      x : str
          Variable name for x-axis
      y : str
          Variable name for y-axis
      quiver_density : int, optional
          Density of quiver arrows
      quiver_scale : float, optional
          Scaling factor for arrow length
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on



   .. py:method:: scatter(x: str, y: str, color_var: str | None = None, invert_yaxis: bool = False, fig=None, ax=None, **kwargs) -> None

      Create scatter plot of two variables with optional color mapping.

      Parameters
      ----------
      x : str
          Variable name for x-axis
      y : str
          Variable name for y-axis
      color_var : str or None, optional
          Variable name for color mapping
      invert_yaxis : bool, optional
          Whether to invert y-axis
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      ``**kwargs``
          Additional arguments for scatter plot

      Returns
      -------
      matplotlib.collections.PathCollection
          Scatter plot object



   .. py:method:: scatter3d(x: str, y: str, z: str, color_var: str | None = None, invert_yaxis: bool = False, fig=None, ax=None, **kwargs) -> None

      Create scatter plot of two variables with optional color mapping.

      Parameters
      ----------
      x : str
          Variable name for x-axis
      y : str
          Variable name for y-axis
      color_var : str or None, optional
          Variable name for color mapping
      invert_yaxis : bool, optional
          Whether to invert y-axis
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      ``**kwargs``
          Additional arguments for scatter plot

      Returns
      -------
      matplotlib.collections.PathCollection
          Scatter plot object



   .. py:method:: tricontourf(x: str, y: str, z: str, fig=None, ax=None, levels=None)

      Create filled contour plot of irregular grid data.

      Parameters
      ----------
      x : str
          Variable name for x-axis
      y : str
          Variable name for y-axis
      z : str
          Variable name for contour values
      fig : matplotlib.figure.Figure, optional
          Figure to plot on
      ax : matplotlib.axes.Axes, optional
          Axes to plot on
      levels : int, optional
          Number of contour levels



.. py:class:: ScatterPlot3D

   Bases: :py:obj:`gerg_plotting.plotting_classes.plotter_3d.Plotter3D`


   Class for creating 3D scatter plots using Mayavi.

   Inherits from Plotter3D to provide advanced 3D visualization capabilities
   with optional bathymetric data and variable-based color mapping.


   .. py:method:: map(var: str | None = None, point_size: int | float = 0.05, bounds_padding=0, vertical_scalar=None, fig=None, show: bool = True) -> None

      Create 3D map with bathymetry and scatter points.

      Parameters
      ----------
      var : str or None, optional
          Variable name for color mapping
      point_size : int or float, optional
          Size of scatter points, default 0.05
      bounds_padding : float, optional
          Padding for map bounds, default 0
      vertical_scalar : float, optional
          Scaling factor for depth values
      fig : mayavi.core.scene.Scene, optional
          Figure to plot on
      show : bool, optional
          Whether to display plot, default True



   .. py:method:: scatter(var: str | None = None, point_size: int | float = 0.05, vertical_scalar=None, fig=None, show: bool = True) -> None

      Create 3D scatter plot.

      Parameters
      ----------
      var : str or None, optional
          Variable name for color mapping
      point_size : int or float, optional
          Size of scatter points, default 0.05
      vertical_scalar : float, optional
          Scaling factor for depth values
      fig : mayavi.core.scene.Scene, optional
          Figure to plot on
      show : bool, optional
          Whether to display plot, default True



